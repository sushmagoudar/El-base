name: 'Bicep Unit Tests'

# We run on just PRs + main since this validate requires full read/write permissions to Azure and we can't do wildcards for the branch name in Azure OIDC federated credentials
on:
  workflow_call:
#     inputs:
#       environment:
#         description: Name of environment
#         type: string
#         required: true

env:
  LOCATION: "eastus"
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  BRANCH_NAME: ${{github.ref_name}}
  
  
#Special permissions required for OIDC authentication
#permissions:
#  actions: read
#  contents: read
#  security-events: write

jobs:
  environments:
    name: Set environment
    runs-on: ubuntu-latest
    steps:
      - run: echo "Setting $ENVIRONMENT.."
    outputs:
      # Defaults to 'dev' in case of a feature branch
      # You could also use the contains expression if needed
      environment: ${{github.ref_name	}}
  bicep-unit-tests:
    name: 'Bicep Unit Tests'
    runs-on: ubuntu-latest
    needs: [environments]
    #environment: ${{ needs.environments.outputs.environment }}
    #permissions:
    #  actions: read
     # security-events: write
    # Bicep What-if / Validate functions also check if your role has permisisons to create the resources so we need full read/write permissions
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

      

    # Authenticate to Az CLI using OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        

    # Checks that all Bicep configuration files adhere to a canonical format
    - name: Bicep Lint
      uses: Azure/cli@v1
      with:
        inlineScript: |
            az config set bicep.use_binary_from_path=False
            az bicep build --file main.bicep
        
    # Validate whether a template is valid at subscription scope
    - name: Bicep Validate
      uses: Azure/cli@v1
      with:
        inlineScript: |
            az deployment group validate \
            --name validate-${{ github.run_id }} \
            --resource-group EL \
            --template-file app.bicep \
            --parameters @azuredeploy.parameters.json
 
    # Perform a security scan of the bicep code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: bicep

#     # Upload results to GitHub Advanced Security
#     - name: Upload SARIF file
#       if: success() || failure()
#       uses: github/codeql-action/upload-sarif@v2
#       with:
#         sarif_file: results.sarif
#         category: checkov

    # Preview changes
    - name: "What-If"
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az deployment group what-if \
            --name validate-${{ github.run_id }} \
            --resource-group EL \
            --template-file app.bicep \
            --parameters @azuredeploy.parameters.json > whatif
            
      # Create string output of Whatif
    - name: Create String Output
      id: whatif-string
      run: |
        WHATIF=$(cat whatif)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Whatif Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "$WHATIF" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

#     # Publish Terraform Plan as task summary
#     - name: Publish Whatif to Task Summary
#       env:
#         SUMMARY: ${{ steps.whatif-string.outputs.summary }}
#       run: |
#         echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
#     # If this is a PR post the changes
#     - name: Push Whatif Output to PR
#       if: github.ref != 'refs/heads/main'
#       uses: actions/github-script@v6
#       env:
#         SUMMARY: "${{ steps.whatif-string.outputs.summary }}"
#       with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const body = `${process.env.SUMMARY}`;
#             github.rest.issues.createComment({
#                 issue_number: context.issue.number,
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 body: body
#             })

  deploy-workload:
    name: 'Deploy Workload to AZ'
    runs-on: ubuntu-latest
    needs: [environments,bicep-unit-tests]
    environment: ${{ needs.environments.outputs.environment }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Authenticate to Az CLI using OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy
    - name: "Bicep Deployment"
      uses: Azure/cli@v1
      with:
        inlineScript: |
          #az deployment group create --resource-group EL --template-file app.bicep --parameters logicAppName=Electrolux-test
          az resource list --resource-group EL
